@page "/vote"
@using MusicSmash.Components.Sub_Components
@using MusicSmash.Controllers
@using MusicSmash.Controllers.Api.Spotify
@using MusicSmash.Models
@rendermode InteractiveServer
@inject RoundController roundController
@inject VoteController voteController 
@inject Api spotifyAPI
@inject IHttpContextAccessor httpContext
@inject Events eventsCollectior

@if(isAuthenticated)
{
    <VS 
        LeftAlbum="GetLeftAlbum()" 
        RightAlbum="GetRightAlbum()" 
        OnVote="VoteAlbum" 
    />
}
else
{
    <RedirectToPage Page="/" />
}



@code 
{
    public Round CurrentRound { get; set; }

    public bool isAuthenticated => ShouldRender().Result;

    protected override Task OnInitializedAsync()
    {
        var oldRound = roundController.GetOldRound();
        CurrentRound = roundController.GetNextRound(oldRound);
        return base.OnInitializedAsync();
    }

    protected async Task<bool> ShouldRender()
    {
        string token = string.Empty;
        if(!httpContext?.HttpContext?.Request.Cookies.TryGetValue("token", out token) ?? false)
            return false;

        var result = await spotifyAPI.GetUserProfileAsync(token).ConfigureAwait(false);
        var isPremium = result.Product == "premium";

        return true;
    }

    private Game GetNextGame()
    {
        var nextGame = CurrentRound.Games.FirstOrDefault(g => g.Winner is null);

        if(nextGame is not null)
            return nextGame;

        // Round finished
        roundController.SaveRound(CurrentRound);
        CurrentRound = roundController.GetNextRound(CurrentRound);
        return GetNextGame();
    }

    public Album GetLeftAlbum()
    {
        return GetNextGame().Left;
    }

    public Album GetRightAlbum()
    {
        return GetNextGame().Right;
    }

    public void VoteAlbum(Album voted)
    {
        GetNextGame().Winner = voted;
        StateHasChanged();
    }
}
