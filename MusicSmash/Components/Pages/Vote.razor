@page "/vote"
@using MusicSmash.Components.Sub_Components
@using MusicSmash.Controllers
@using MusicSmash.Controllers.Api.Spotify
@using MusicSmash.Controllers.Exceptions
@using MusicSmash.Models
@rendermode InteractiveServer
@inject NavigationManager navigationManager
@inject RoundController roundController
@inject GameController gameController 
@inject Api spotifyAPI
@inject IHttpContextAccessor httpContext
@inject Events eventsCollectior

@if(isAuthenticated)
{
    <VS 
        LeftAlbum="GetLeftAlbum()" 
        RightAlbum="GetRightAlbum()" 
        OnVote="VoteAlbum" 
    />
}
else
{
    <script>window.location.replace("/login")</script>
}

@code 
{
    public Round CurrentRound { get; set; }
    public Game CurrentGame { get; set; }

    public bool isAuthenticated => ShouldRender().Result;

    protected override Task OnInitializedAsync()
    {
        CurrentRound = roundController.GetRound();
        GetNextGame();
        StateHasChanged();
        return base.OnInitializedAsync();
    }

    protected async Task<bool> ShouldRender()
    {
        string token = string.Empty;
        if(!httpContext?.HttpContext?.Request.Cookies.TryGetValue("token", out token) ?? false)
            return false;

        var result = await spotifyAPI.GetUserProfileAsync(token).ConfigureAwait(false);
        var isPremium = result.Product == "premium";

        return true;
    }

    private void GetNextGame()
    {
        try
        {
            CurrentGame = gameController.GetNextGame(CurrentRound);
        }
        catch (RoundFinishedException ex)
        {
            //Update round
            roundController.SaveRound(CurrentRound);
            CurrentRound = roundController.GetRound();
            GetNextGame();
        }
    }

    public Album GetLeftAlbum() => CurrentGame?.Left ?? Album.NotDefined;

    public Album GetRightAlbum() => CurrentGame?.Right ?? Album.NotDefined;

    public void VoteAlbum(Album voted)
    {
        gameController.SetWinner(CurrentGame, voted);
        GetNextGame();
        StateHasChanged();
    }
}
